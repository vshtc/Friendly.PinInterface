using System;
using System.Collections.Generic;
using VSHTC.Friendly.PinInterface.Inside;

namespace VSHTC.Friendly.PinInterface
{
    /// <summary>
    /// 通常のインターフェイスと対応するIInstanceを継承したインターフェイスのマップです。
    /// このマップに登録されているインターフェイスは必要に応じて対応するIInstanceを継承したインターフェイスが使用されます。
    /// </summary>
    public static class MapIInstance
    {
        static object _sync = new object();
        static Dictionary<Type, Type> _interfaceToIInstance = new Dictionary<Type, Type>();
        static int _generateIndex = 0;
        static string _uniqueNamespaceForGenerate = "VSHTC.Friendly.PinInterface.AutoGeneratedInterfaces";

        /// <summary>
        /// GenerateIInstandePlusで対応するIInstandeを継承したインターフェイスを生成するときに使う固有のネームスペース名称です。
        /// </summary>
        public static string UniqueNamespaceForGenerate
        {
            get
            {
                return _uniqueNamespaceForGenerate;
            }
            set
            {
                lock (_sync)
                {
                    _uniqueNamespaceForGenerate = value;
                }
            }
        }

        /// <summary>
        /// IInstanceを追加合成したインターフェイスの登録です。
        /// </summary>
        /// <param name="iinstances">IInstanceを追加合成したインターフェイス</param>
        public static void EntryIInstancePlus(params Type[] iinstances)
        {
            lock (_sync)
            {
                foreach (var iinctance in iinstances)
                {
                    Type srcType = IInstanceMappingChecker.GetSrcType(iinctance);
                    if (!_interfaceToIInstance.ContainsKey(srcType))
                    {
                        _interfaceToIInstance.Add(srcType, iinctance);
                    }
                }
            }
        }

        /// <summary>
        /// 指定のインターフェイスにIInstanceを追加合成したインターフェイスを生成し登録します。
        /// </summary>
        /// <param name="srcInterfaceTypes">通常のインターフェイス</param>
        public static void GenerateIInstandePlus(params Type[] srcInterfaceTypes)
        {
            lock (_sync)
            {
                foreach (var srcType in srcInterfaceTypes)
                {
                    if (!_interfaceToIInstance.ContainsKey(srcType))
                    {
                        IInstanceMappingChecker.CheckGenerateIInstancePlus(srcType);
                        _interfaceToIInstance.Add(srcType, IInstanceGenerator.AddIInstance(srcType, _uniqueNamespaceForGenerate, _generateIndex++));
                    }
                }
            }
        }

        internal static Type FindIInstancePlus(Type srcInterface)
        {
            lock (_sync)
            {
                Type iinstance;
                return _interfaceToIInstance.TryGetValue(srcInterface, out iinstance) ? iinstance : null;
            }
        }

        internal static Type TryConvertType(Type src)
        {
            Type t = FindIInstancePlus(src);
            return t == null ? src : t;
        }
    }
}
